src/
├── api/                         # Backend API calls
│   ├── fetchDropdownOptions.ts  # Fetches dropdown values
│   └── fetchGridData.ts         # Fetches grid data based on filters

├── components/                 # Reusable UI components
│   ├── Header.tsx              # Top header
│   ├── Footer.tsx              # Bottom footer
│   ├── Layout.tsx              # Wraps header, footer, and main content
│   ├── ToolBar.tsx             # Contains dropdowns + date input
│   ├── Dropdown.tsx            # Reusable dropdown component
│   └── DataGrid.tsx            # AG Grid wrapper

├── context/                    # Shared state across pages
│   └── DropdownContext.tsx     # Provides dropdown values to ToolBar and AddJobDetail

├── pages/                      # Page-level components
│   ├── Dashboard.tsx           # Main dashboard with filters + grid
│   └── AddJobDetail.tsx        # Form page that reuses dropdowns

├── types/                      # TypeScript interfaces and enums
│   ├── dropdowns.ts            # Dropdown keys and option types
│   └── filters.ts              # Filter state for API payloads

├── styles/                     # Optional: CSS or SCSS modules
│   └── layout.css              # Layout styling

├── App.tsx                     # Root component with routing
├── main.tsx                    # Vite entry point
└── vite.config.ts              # Vite config for proxying and env vars

-----------Header.tsx--------------

import React from 'react';

const Header: React.FC = () => (
  <header className="app-header">
    <h1>Dashboard</h1>
  </header>
);

export default Header;

----------------Footer.tsx-------------------
import React from 'react';

const Footer: React.FC = () => (
  <footer className="app-footer">
    <span>© 2025 Your Company</span>
  </footer>
);

export default Footer;


----------Layout.tsx----------------
import React from 'react';
import Header from './Header';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => (
  <div className="layout">
    <Header />
    <main>{children}</main>
    <Footer />
  </div>
);

export default Layout;

-------Dashboard.tsx-----------------

import React, { useState, useEffect } from 'react';
import Layout from '../components/Layout';
import ToolBar from '../components/ToolBar';
import DataGrid from '../components/DataGrid';
import { FilterState } from '../types/dropdowns';
import { fetchGridData } from '../api/fetchGridData';

const Dashboard: React.FC = () => {
  const [filters, setFilters] = useState<FilterState>({
    portfolio: '',
    subPortfolio: '',
    region: '',
    process: '',
    subProcess: '',
    hop: '',
    date: ''
  });

  const [gridData, setGridData] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      const data = await fetchGridData(filters);
      setGridData(data);
      setLoading(false);
    };

    fetchData();
  }, [filters]);

  return (
    <Layout>
      <ToolBar filters={filters} setFilters={setFilters} />
      {loading ? (
        <div className="grid-loading">Loading data...</div>
      ) : (
        <DataGrid rowData={gridData} />
      )}
    </Layout>
  );
};

export default Dashboard;

---Dropdown.tsx----
import React, { createContext, useContext, useEffect, useState } from 'react';
import { DropdownOptions, DropdownKeys } from '../types/dropdowns';
import { fetchDropdownOptions } from '../api/fetchDropdownOptions';

interface DropdownContextType {
  options: DropdownOptions;
  loading: boolean;
}


const DropdownContext = createContext<DropdownContextType>({
  options: {},
  loading: true
});

export const useDropdowns = () => useContext(DropdownContext);

export const DropdownProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [options, setOptions] = useState<DropdownOptions>({});
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchDropdownOptions().then((data) => {
      setOptions(data);
      setLoading(false);
    });
  }, []);

  return (
    <DropdownContext.Provider value={{ options, loading }}>
      {children}
    </DropdownContext.Provider>
  );
};


---------dropdowns.ts----------------

export type DropdownKeys =
  | 'portfolio'
  | 'subPortfolio'
  | 'region'
  | 'process'
  | 'subProcess'
  | 'hop';

export type DropdownOptions = {
  [key in DropdownKeys]?: string[];
};

----------------fetchDropdownOptions.ts-------

import { DropdownOptions } from '../types/dropdowns';

export const fetchDropdownOptions = async (): Promise<DropdownOptions> => {
  const response = await fetch('/api/dropdowns');
  return response.json();
};



----------------Dropdown.tsx-------
import React from 'react';

interface DropdownProps {
  label: string;
  value: string;
  options: string[];
  onChange: (value: string) => void;
}

const Dropdown: React.FC<DropdownProps> = ({ label, value, options, onChange }) => (
  <label className="dropdown-label">
    <span>{label}:</span>
    <select value={value} onChange={(e) => onChange(e.target.value)}>
      <option value="">-- Select --</option>
      {options.map((opt) => (
        <option key={opt} value={opt}>
          {opt}
        </option>
      ))}
    </select>
  </label>
);

export default Dropdown;

-------------TooBar.tsx-------------------

import React from 'react';
import { useDropdowns } from '../context/DropdownContext';
import Dropdown from './Dropdown';

interface ToolBarProps {
  filters: Record<string, string>;
  setFilters: (newFilters: Record<string, string>) => void;
}

const ToolBar: React.FC<ToolBarProps> = ({ filters, setFilters }) => {
  const { options, loading } = useDropdowns();

  const handleChange = (key: string, value: string) => {
    setFilters({ ...filters, [key]: value });
  };

  if (loading) return <div>Loading filters...</div>;

  return (
    <div className="toolbar">
      {Object.entries(options).map(([key, opts]) => (
        <Dropdown
          key={key}
          label={key}
          value={filters[key] || ''}
          options={opts || []}
          onChange={(val) => handleChange(key, val)}
        />
      ))}
      <input
        type="date"
        value={filters.date || ''}
        onChange={(e) => handleChange('date', e.target.value)}
      />
    </div>
  );
};

export default ToolBar;


------------------------------------------------------------------------------------

AddJobDetail.tsx

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useDropdowns } from '../context/DropdownContext';
import { DropdownOptions } from '../types/dropdowns';

const AddJobDetail: React.FC = () => {
  const { options } = useDropdowns();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    portfolio: '',
    subPortfolio: '',
    region: '',
    process: '',
    subProcess: '',
    hop: '',
    notes: ''
  });

  const handleChange = (key: keyof typeof formData, value: string) => {
    setFormData((prev) => ({ ...prev, [key]: value }));
  };

  const handleSave = async () => {
    try {
      const response = await fetch('/api/job-detail', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error(`Save failed: ${response.status}`);
      }

      alert('Job detail saved successfully!');
      navigate('/');
    } catch (error) {
      console.error('Error saving job detail:', error);
      alert('Failed to save job detail.');
    }
  };

  const handleClose = () => {
    navigate('/');
  };

  return (
    <div className="toolbar">
      {Object.entries(options).map(([key, opts]) => (
        <div key={key} className="dropdown-label">
          <label>{key}</label>
          <select
            value={formData[key as keyof DropdownOptions] || ''}
            onChange={(e) => handleChange(key as keyof typeof formData, e.target.value)}
          >
            <option value="">Select {key}</option>
            {opts?.map((opt) => (
              <option key={opt} value={opt}>{opt}</option>
            ))}
          </select>
        </div>
      ))}

      <div className="dropdown-label" style={{ flexBasis: '100%' }}>
        <label>Notes</label>
        <textarea
          value={formData.notes}
          onChange={(e) => handleChange('notes', e.target.value)}
          rows={4}
          style={{ width: '100%', padding: '0.5rem', borderRadius: '4px', border: '1px solid #ccc' }}
        />
      </div>

      <div style={{ marginTop: '1rem', display: 'flex', gap: '1rem' }}>
        <button onClick={handleSave} style={{ padding: '0.5rem 1rem' }}>Save</button>
        <button onClick={handleClose} style={{ padding: '0.5rem 1rem' }}>Close</button>
      </div>
    </div>
  );
};

export default AddJobDetail;

-----------------------------------
App.tsx
import { DropdownProvider } from './context/DropdownContext';

const App: React.FC = () => (
  <DropdownProvider>
    <Router>
      <Routes>
        <Route path="/" element={<Dashboard />} />
        <Route path="/addJobDetail" element={<AddJobDetail />} />
      </Routes>
    </Router>
  </DropdownProvider>
);

------------filters.ts------------------

export interface FilterState {
  portfolio: string;
  subPortfolio: string;
  region: string;
  process: string;
  subProcess: string;
  hop: string;
  date: string;
}

---------------------------------------

fetchGridData.ts         


import { FilterState } from '../types/filters';

export const fetchGridData = async (filters: FilterState): Promise<any[]> => {
  try {
    const response = await fetch('/api/grid-data', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(filters)
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }

    const data = await response.json();
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('Failed to fetch grid data:', error);
    return [];
  }
};

--------------------main.tsx----------------------

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import App from './App';
import Dashboard from './pages/Dashboard';
import AddJobDetail from './pages/AddJobDetail';
import { DropdownProvider } from './context/DropdownContext';
import './styles/layout.css'; // Optional: global styles

const root = ReactDOM.createRoot(document.getElementById('root')!);

root.render(
  <React.StrictMode>
    <DropdownProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<App />}>
            <Route index element={<Dashboard />} />
            <Route path="addJobDetail" element={<AddJobDetail />} />
          </Route>
        </Routes>
      </BrowserRouter>
    </DropdownProvider>
  </React.StrictMode>
);

--------------DataGrid.tsx------
import React, { useRef } from 'react';
import { AgGridReact } from 'ag-grid-react';
import { ColDef } from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';

interface DataGridProps {
  rowData: any[];
}

const DataGrid: React.FC<DataGridProps> = ({ rowData }) => {
  const gridRef = useRef<AgGridReact>(null);

  const columnDefs: ColDef[] = [
    { headerName: 'ID', field: 'id', sortable: true, filter: true },
    { headerName: 'Name', field: 'name', sortable: true, filter: true },
    { headerName: 'Status', field: 'status', sortable: true, filter: true }
  ];

  return (
    <div className="ag-theme-alpine" style={{ height: 500, width: '100%' }}>
      <AgGridReact
        ref={gridRef}
        rowData={rowData}
        columnDefs={columnDefs}
        domLayout="autoHeight"
        animateRows={true}
      />
    </div>
  );
};

export default DataGrid;

------------layout.css-------------------------


/* Layout container */
.layout {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  font-family: 'Segoe UI', sans-serif;
}

/* Header */
.app-header {
  background-color: #1f2937;
  color: white;
  padding: 1rem 2rem;
  font-size: 1.5rem;
  font-weight: bold;
}

/* Footer */
.app-footer {
  background-color: #f3f4f6;
  color: #4b5563;
  padding: 0.75rem 2rem;
  text-align: center;
  font-size: 0.875rem;
  margin-top: auto;
}

/* Toolbar */
.toolbar {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  padding: 1rem 2rem;
  background-color: #f9fafb;
  border-bottom: 1px solid #e5e7eb;
}

.dropdown-label {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
  color: #374151;
}

.dropdown-label select,
.dropdown-label input[type="date"] {
  padding: 0.5rem;
  border: 1px solid #d1d5db;
  border-radius: 4px;
  font-size: 0.875rem;
  margin-top: 0.25rem;
}

/* Grid container */
.ag-theme-alpine {
  padding: 1rem 2rem;
}

/* Loading state */
.grid-loading {
  padding: 2rem;
  text-align: center;
  font-size: 1rem;
  color: #6b7280;
}


-------------vite.config.ts-----

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    outDir: 'dist',
    emptyOutDir: true
  },
  server: {
    port: 3000,
    proxy: {
      '/api': 'http://localhost:8080'
    }
  }
});


