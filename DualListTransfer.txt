import React, { useState, useEffect } from 'react';
import { fetchAvailableItems, fetchSelectedItems } from './apiService';
import './DualListTransfer.css';

type Item = {
  id: number;
  label: string;
};

export default function DualListTransfer() {
  const [available, setAvailable] = useState<Item[]>([]);
  const [selected, setSelected] = useState<Item[]>([]);
  const [checked, setChecked] = useState<Item[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    const loadData = async () => {
      try {
        const [avail, select] = await Promise.all([
          fetchAvailableItems(),
          fetchSelectedItems(),
        ]);
        setAvailable(avail);
        setSelected(select);
      } catch (err) {
        setError('Failed to load items');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, []);

  const handleToggle = (item: Item) => {
    setChecked((prev) =>
      prev.some((i) => i.id === item.id)
        ? prev.filter((i) => i.id !== item.id)
        : [...prev, item]
    );
  };

  const moveItems = (
    source: Item[],
    setSource: React.Dispatch<React.SetStateAction<Item[]>>,
    target: Item[],
    setTarget: React.Dispatch<React.SetStateAction<Item[]>>
  ) => {
    const moving = checked.filter((item) =>
      source.some((s) => s.id === item.id)
    );
    setSource(source.filter((item) => !moving.some((m) => m.id === item.id)));
    setTarget([...target, ...moving]);
    setChecked(checked.filter((item) => !moving.some((m) => m.id === item.id)));
  };

  if (loading) return <p>Loading items...</p>;
  if (error) return <p>{error}</p>;

  return (
    <div className="dual-list-container">
      <ListBox
        title="Available"
        items={available}
        checked={checked}
        onToggle={handleToggle}
      />
      <div className="button-group">
        <button
          onClick={() =>
            moveItems(available, setAvailable, selected, setSelected)
          }
        >
          {'>'}
        </button>
        <button
          onClick={() =>
            moveItems(selected, setSelected, available, setAvailable)
          }
        >
          {'<'}
        </button>
      </div>
      <ListBox
        title="Selected"
        items={selected}
        checked={checked}
        onToggle={handleToggle}
      />
    </div>
  );
}

type ListBoxProps = {
  title: string;
  items: Item[];
  checked: Item[];
  onToggle: (item: Item) => void;
};

function ListBox({ title, items, checked, onToggle }: ListBoxProps) {
  return (
    <div className="list-box">
      <h4>{title}</h4>
      <ul className="list-ul">
        {items.map((item) => {
          const isSelected = checked.some((i) => i.id === item.id);
          return (
            <li
              key={item.id}
              className={`list-row ${isSelected ? 'selected' : ''}`}
              onClick={() => onToggle(item)}
            >
              {item.label}
            </li>
          );
        })}
      </ul>
    </div>
  );
}
